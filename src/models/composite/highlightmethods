
// showMovesPawn(index : number) {
// 	this.showMovesPawnOpen(index);
// }


// showMovesPawnOpen(index : number) {
// 	const position = this._squares[index].getPiece()?.isWhite() ? this.up(index, 1) : this.down(index, 1);
// 	console.log(this._squares[index].getPiece())

// 	// if (this.isValidMove(position)) {
// 	    this._highlights[position].setOpen();
// 	//     position = this.state.pawn.advanceTwo();
// 	//     if (this.hasMoved(index)) {
// 	// 	return;
// 	//     }
// 	//     if (this.isValidMove(position)) {
// 		// highlights[position].setOpen();
// 	//     }
// 	// }
// }

// isValidMove(index : number) {
// 	return this.isOnBoard(index) && !this.hasPiece(index);
// }    

// isOnBoard(index : number) {
// 	return index > 0 && index < 63;
// }

// down(index : number, step : number) {
// 	return index + (BOARD_WIDTH * step);
// }

// up(index : number, step : number) {
// 	return index - (BOARD_WIDTH * step);
// }


// onWestEdge(index : number) {
// 	return column(index) === 0;
// }    

// onEastEdge(index : number) {
// 	return column(index) === BOARD_WIDTH - 1;
// }    

// hasMoved(index : number) {
// 	if (this.state.pawn.isWhite()) {
// 	    return Math.floor(index / BOARD_WIDTH) !== 6;
// 	}
// 	return Math.floor(index / BOARD_WIDTH) !== 1;
// }

hasPiece(index : number) {
return index > 0;
// return this.props.squares[index].piece.isNoPiece();
}    

}
// highlightAttacks(currentIndex, highlights) {
// 	let pawn = this.props.squares[currentIndex];
// 	let direction = getDirection(pawn.color);
// 	let targetIndex = currentIndex + (direction * BOARD_WIDTH) + 1;

// 	if (!this.onEastEdge(currentIndex)) {
// 	    highlights[targetIndex] = Number(this.hasPiece(targetIndex) * 2);	    
// 	}

// 	targetIndex = currentIndex + (direction * BOARD_WIDTH) - 1;

// 	if (!this.onWestEdge(currentIndex)) {
// 	    highlights[targetIndex] = Number(this.hasPiece(targetIndex) * 2);	    
// 	}

// }

// highlightEnPassant(index, highlights) {
// 	let pawn = this.props.squares[index];
// 	let direction = getDirection(pawn.color);

// 	// let targetMoveEast : MoveI = {
// 	//     start: index + (direction * 2 * BOARD_WIDTH) + 1,
// 	//     end: index + 1,
// 	//     piece: {
// 	// 	color: pawn.color === Color.White ? Color.Black : Color.White,
// 	// 	piece: Piece.PawnComponent
// 	//     } as Piece
// 	// };

// 	// let targetMoveWest : MoveI = {
// 	//     start: index + (direction * 2 * BOARD_WIDTH) - 1,
// 	//     end: index - 1,
// 	//     piece: {
// 	// 	color: pawn.color === Color.White ? Color.Black : Color.White,
// 	// 	piece: Piece.PawnComponent
// 	//     } as Piece
// 	// };

// 	let targetMoveEast : MoveI = {};

// 	let targetMoveWest : MoveI = {};

// 	if (this.props.lastMove.isEqual(targetMoveEast)) {
// 	    let position = index + (direction * BOARD_WIDTH) + 1;
// 	    highlights[position] = 2;
// 	    return;
// 	}
// 	if (this.props.lastMove.isEqual(targetMoveWest)) {
// 	    let position = index + (direction * BOARD_WIDTH) - 1;
// 	    highlights[position] = 2;
// 	}
// }




// highlightMoves(index : number) {
// 	const square = this.state.squares[index];

// 	switch (square.piece) {
// 	case Piece.Pawn:
// 	    this.highlightPawn(index);
// 	    break;
// 	case Piece.Knight:
// 	    this.highlightKnight(index);
// 	    break;
// 	case Piece.Bishop:
// 	    this.highlightBishop(index);
// 	    break;
// 	case Piece.Rook:
// 	    this.highlightRook(index);
// 	    break;
// 	case Piece.Queen:
// 	    this.highlightQueen(index);
// 	    break;
// 	case Piece.King:
// 	    this.highlightKing(index);
// 	    break;
// 	default:
// 	}
// 	this.setState({
// 	    active: true,
// 	    selected: index
// 	});
// }

// highlightBishop(index : number) {
// 	const highlights = this.state.highlights.slice();
// 	//northeast
// 	for (let position = index - (BOARD_WIDTH - 1); position >= 0 && column(position) !== 0; position -= (BOARD_WIDTH - 1)) {
// 	    if(!this.highlightFriendOrFoeOrOpen(index, position, highlights)){
// 		break;
// 	    }
// 	}
// 	//southeast
// 	for (let position = index + (BOARD_WIDTH + 1); position < BOARD_SIZE && column(position) !== 0; position += (BOARD_WIDTH + 1)) {
// 	    if(!this.highlightFriendOrFoeOrOpen(index, position, highlights)){
// 		break;
// 	    }
// 	}
// 	//southwest
// 	for (let position = index + (BOARD_WIDTH - 1); position < BOARD_SIZE && column(position) !== BOARD_WIDTH - 1; position += (BOARD_WIDTH - 1)) {
// 	    if(!this.highlightFriendOrFoeOrOpen(index, position, highlights)){
// 		break;
// 	    }
// 	}
// 	//northwest
// 	for (let position = index - (BOARD_WIDTH + 1); position >= 0 && column(position) !== BOARD_WIDTH - 1; position -= (BOARD_WIDTH + 1)) {
// 	    if(!this.highlightFriendOrFoeOrOpen(index, position, highlights)){
// 		break;
// 	    }
// 	}

// 	this.setState({
// 	    highlights: highlights,
// 	})
// 	return highlights;

// }


// highlightKnight(index : number) {
// 	const highlights = this.state.highlights.slice();
// 	// north
// 	// up 2, right 1
// 	this.highlightKnightSquare(index, index - 2 * BOARD_WIDTH + 1, highlights);
// 	// up 2, left 1
// 	this.highlightKnightSquare(index, index - 2 * BOARD_WIDTH - 1, highlights);
// 	// right
// 	// right 2, up 1
// 	this.highlightKnightSquare(index, index + 2 + 1 * BOARD_WIDTH, highlights);
// 	// right 2, down 1
// 	this.highlightKnightSquare(index, index + 2 - 1 * BOARD_WIDTH, highlights);
// 	// south
// 	// south 2, right 1
// 	this.highlightKnightSquare(index, index + 2 * BOARD_WIDTH + 1, highlights);
// 	// south 2, left 1
// 	this.highlightKnightSquare(index, index + 2 * BOARD_WIDTH - 1, highlights);
// 	// left
// 	// left 2, up 1
// 	this.highlightKnightSquare(index, index - 2 + 1 * BOARD_WIDTH, highlights);
// 	// left 2, down 1
// 	this.highlightKnightSquare(index, index - 2 - 1 * BOARD_WIDTH, highlights);

// 	this.setState({
// 	    highlights: highlights,
// 	})

// }

// highlightKnightSquare(index : number, newIndex, highlights) {
// 	if (distance(index, newIndex) > 3) {
// 	    return;
// 	}
// 	if(this.isOnBoard(newIndex)){
// 	    this.highlightFriendOrFoeOrOpen(index, newIndex, highlights);
// 	}
// }


// highlightRook(index : number) {
// 	const highlights = this.state.highlights.slice();
// 	//north
// 	for (let position = index - BOARD_WIDTH; position > 0; position -= BOARD_WIDTH) {
// 	    if(!this.highlightFriendOrFoeOrOpen(index, position, highlights)){
// 		break;
// 	    }
// 	}
// 	//south
// 	for (let position = index + BOARD_WIDTH; position < BOARD_SIZE; position += BOARD_WIDTH) {
// 	    if(!this.highlightFriendOrFoeOrOpen(index, position, highlights)){
// 		break;
// 	    }
// 	}
// 	//east
// 	for (let position = index + 1; column(position) !== 0; position++) {
// 	    if(!this.highlightFriendOrFoeOrOpen(index, position, highlights)){
// 		break;
// 	    }
// 	}
// 	//west
// 	for (let position = index - 1; column(position) !== BOARD_WIDTH - 1; position--) {
// 	    if(!this.highlightFriendOrFoeOrOpen(index, position, highlights)){
// 		break;
// 	    }
// 	}

// 	this.setState({
// 	    highlights: highlights,
// 	})
// 	return highlights;
// }


// // make this fuction more efficient
// // going to pass highlights by ref in the future
// highlightQueen(index) {
// 	let rookHighlights = this.highlightRook(index);
// 	let bishopHighlights = this.highlightBishop(index);
// 	let queenHighlights = rookHighlights.map(function (num, idx) {
// 	    return num + bishopHighlights[idx];
// 	});
// 	this.setState({
// 	    highlights: queenHighlights,
// 	});
// }

// highlightKing(index) {
// 	const highlights = this.state.highlights.slice();
// 	//north
// 	if(this.isOnBoard(index - 1 * BOARD_WIDTH)){
// 	    this.highlightFriendOrFoeOrOpen(index, index - 1 * BOARD_WIDTH, highlights);
// 	}
// 	//northeast
// 	if(this.isOnBoard(index - 1 * BOARD_WIDTH + 1) && column(index - 1 * BOARD_WIDTH + 1) !== 0){
// 	    this.highlightFriendOrFoeOrOpen(index, index - 1 * BOARD_WIDTH + 1, highlights);
// 	}
// 	//east
// 	if(column(index + 1) !== 0){
// 	    this.highlightFriendOrFoeOrOpen(index, index + 1, highlights);
// 	}
// 	//southeast
// 	if(this.isOnBoard(index + 1 * BOARD_WIDTH + 1) && column(index + 1 * BOARD_WIDTH + 1) !== 0){
// 	    this.highlightFriendOrFoeOrOpen(index, index + 1 * BOARD_WIDTH + 1, highlights);
// 	}
// 	//south
// 	if(this.isOnBoard(index + 1 * BOARD_WIDTH)){
// 	    this.highlightFriendOrFoeOrOpen(index, index + 1 * BOARD_WIDTH, highlights);
// 	}
// 	//southwest
// 	if(this.isOnBoard(index + 1 * BOARD_WIDTH - 1) && column(index + 1 * BOARD_WIDTH - 1) !== BOARD_WIDTH - 1){
// 	    this.highlightFriendOrFoeOrOpen(index, index + 1 * BOARD_WIDTH - 1, highlights);
// 	}
// 	//west
// 	if(column(index - 1) !== BOARD_WIDTH - 1){
// 	    this.highlightFriendOrFoeOrOpen(index, index - 1, highlights);
// 	}
// 	//northwest
// 	if(this.isOnBoard(index - 1 * BOARD_WIDTH - 1) && column(index - 1 * BOARD_WIDTH - 1) !== BOARD_WIDTH - 1){
// 	    this.highlightFriendOrFoeOrOpen(index, index - 1 * BOARD_WIDTH - 1, highlights);
// 	}

// 	this.setState({
// 	    highlights: highlights,
// 	})

// }

// highlightFriendOrFoeOrOpen(index, newIndex, highlights) {
// 	if (!this.hasPiece(newIndex)) {
// 	    this.tryHighlight(newIndex, highlights, OPEN);
// 	    return true;
// 	} else if (this.hasFoePiece(index, newIndex)) {
// 	    this.tryHighlight(newIndex, highlights, ATTACK);
// 	    return false;
// 	} else {
// 	    return false;
// 	}
// }

// tryHighlight(index, highlights, state) {
// 	if(index <= 0 || index >= BOARD_SIZE) {
// 	    return;
// 	}
// 	highlights[index] = state;
// }